
John Allen
Discussion Question
Before I even thought about coding, I spent a lot of time using gdb. The first function that I coded was memory display. My method of debugging was calling using the command “md 10000” because we were given the desired output. From there I was able to work on the three parts of the problem, one step at a time. Displaying the argument in the correct format, printing the memory content in hex, and printing the printable characters in ashii table.
	The set memory function was easier to debug because I was able to use the memory display command to debug. I could attempt to change a value in memory and see what changes I was making immediately.
For the help function, I used gdb enough to know exactly where the messages to print would be. Info local and info args were very helpful.
2. In Unix what I try to reference a nonexistent value in memory, I receive a segmentation fault. The error occurs because  am trying to dereference a value in memory that doesn’t exist. I also receive a segmentation fault when I try to change values in memory that I do not have access to, like ROM. In SPAC, when I try to enter a nonexistent memory address, i get Exception 14.
3.
00101d9c D _xyz
PC-tutor> md 00101d9c
06 00 00 00 6c 1e 10 00 04 98 06 00 00 00 00 00 00 
00101da0 D _pxyz
PC-tutor> md 00101da0
6c 1e 10 00 04 98 06 00 00 00 00 00 00 00 00 00 00 

C. 
D. I don’t have access to running tutor unfortunately, I would guess that this is not possible because you would have to change s to x every time stop is referenced
4. In the usyms file, (product of make), I can see that my code is around the area, 0x00010dec
-0x00010828 - UNIX
In SAPC I am looking in the sys folder and it is not clear where the program is, I think it may be dispersed across the memory
5. In Unix it just causes a segmentation fault and the program stop executing. UNIX has protection’s from allowing this part of memory to be changed by a program. SPAC does not have this protection and the program crashes
6. 
g0             0x0      0
g1             0xffffffff       -1
g2             0x0      0
g3             0x0      0
g4             0x0      0
g5             0x0      0
g6             0x0      0
g7             0x0      0
o0             0x2127c  135804
o1             0xff3420d8       -13360936
o2             0xff33e5d8       -13376040
o3             0xffffffff       -1
o4             0x22038  139320
o5             0xff29bc20       -14042080
sp             0xffbef4f8       4290704632
o7             0x10f34  69428
l0             0xff33e5f0       -13376016
l1             0x0      0
l2             0x0      0
l3             0x0      0
l4             0x0      0
l5             0x0      0
l6             0x0      0

7. The most interesting thing that I did was playing around with gdb. It game me intuition about parts of the program that I didn’t need to know to accomplish the assignment. It was my first time spending a lot of time using gdb and I now see what a powerful tool it is.


