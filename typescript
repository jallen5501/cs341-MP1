Script started on Thu Sep 22 16:07:59 2016
warning: could not update utmp entry
sh: using dumb terminal settings.
blade57(1)% cat ReadMe.txt 
I had my program working perfectly, I don't know what I did. BUT, when I was making my typescript I was getting segmentaiton faults. I didn't have enough time to fix it. I will fix my bug asap.
blade57(2)% cat discussion.txt 

John Allen
Discussion Question
Before I even thought about coding, I spent a lot of time using gdb. The first function that I coded was memory display. My method of debugging was calling using the command “md 10000” because we were given the desired output. From there I was able to work on the three parts of the problem, one step at a time. Displaying the argument in the correct format, printing the memory content in hex, and printing the printable characters in ashii table.
        The set memory function was easier to debug because I was able to use the memory display command to debug. I could attempt to change a value in memory and see what changes I was making immediately.
For the help function, I used gdb enough to know exactly where the messages to print would be. Info local and info args were very helpful.
2. In Unix what I try to reference a nonexistent value in memory, I receive a segmentation fault. The error occurs because  am trying to dereference a value in memory that doesn’t exist. I also receive a segmentation fault when I try to change values in memory that I do not have access to, like ROM. In SPAC, when I try to enter a nonexistent memory address, i get Exception 14.
3.
00101d9c D _xyz
PC-tutor> md 00101d9c
06 00 00 00 6c 1e 10 00 04 98 06 00 00 00 00 00 00 
00101da0 D _pxyz
PC-tutor> md 00101da0
6c 1e 10 00 04 98 06 00 00 00 00 00 00 00 00 00 00 

C. 
D. I don’t have access to running tutor unfortunately, I would guess that this is not possible because you would have to change s to x every time stop is referenced
4. In the usyms file, (product of make), I can see that my code is around the area, 0x00010dec
-0x00010828 - UNIX
In SAPC I am looking in the sys folder and it is not clear where the program is, I think it may be dispersed across the memory
5. In Unix it just causes a segmentation fault and the program stop executing. UNIX has protection’s from allowing this part of memory to be changed by a program. SPAC does not have this protection and the program crashes
6. 
g0             0x0      0
g1             0xffffffff       -1
g2             0x0      0
g3             0x0      0
g4             0x0      0
g5             0x0      0
g6             0x0      0
g7             0x0      0
o0             0x2127c  135804
o1             0xff3420d8       -13360936
o2             0xff33e5d8       -13376040
o3             0xffffffff       -1
o4             0x22038  139320
o5             0xff29bc20       -14042080
sp             0xffbef4f8       4290704632
o7             0x10f34  69428
l0             0xff33e5f0       -13376016
l1             0x0      0
l2             0x0      0
l3             0x0      0
l4             0x0      0
l5             0x0      0
l6             0x0      0

7. The most interesting thing that I did was playing around with gdb. It game me intuition about parts of the program that I didn’t need to know to accomplish the assignment. It was my first time spending a lot of time using gdb and I now see what a powerful tool it is.


blade57(3)% cat *.c
/******************************************************************
*
*   file:     cmds.c
*   author:   betty o'neil
*   date:     ?
*
*   semantic actions for commands called by tutor (cs341, hw2)
*
*   revisions:
*      9/90  eb   cleanup, convert function declarations to ansi
*      9/91  eb   changes so that this can be used for hw1
*      9/02  re   minor changes to quit command
*/
/* the Makefile arranges that #include <..> searches in the right
   places for these headers-- 200920*/

#include <stdio.h>
#include "slex.h"

/*===================================================================*
*
*   Command table for tutor program -- an array of structures of type
*   cmd -- for each command provide the token, the function to call when
*   that token is found, and the help message.
*
*   slex.h contains the typdef for struct cmd, and declares the
*   cmds array as extern to all the other parts of the program.
*   Code in slex.c parses user input command line and calls the
*   requested semantic action, passing a pointer to the cmd struct
*   and any arguments the user may have entered.
*
*===================================================================*/

PROTOTYPE int stop(Cmd *cp, char *arguments);
PROTOTYPE int mem_display(Cmd *cp, char *arguments);
PROTOTYPE int mem_set(Cmd *cp, char *arguments);
PROTOTYPE int help(Cmd *cp, char *arguments);

/* command table */

Cmd cmds[] = {{"md",  mem_display, "Memory display: MD <hexaddress>"},
              {"s",   stop,        "Stop"},
              {"h",   help,        "Help: <cmd>"},
              {"ms",  mem_set,     "Memory set: MS <hexaddress> <new_value>"},
              {NULL,  NULL,        NULL}};  /* null cmd to flag end of table */

char xyz = 6;  /* test global variable  */
char *pxyz = &xyz;  /* test pointer to xyz */
/*===================================================================*
*               command                 routines
*
*   Each command routine is called with 2 args, the remaining
*   part of the line to parse and a pointer to the struct cmd for this
*   command. Each returns 0 for continue or 1 for all-done.
*
*===================================================================*/

int stop(Cmd *cp, char *arguments)
{
  return 1;                     /* all done flag */
}

/*===================================================================*
*
*   mem_display: display contents of 16 bytes in hex
*
*/

int mem_display(Cmd *cp, char *arguments) {
        int address = 0; 
        int i;
        unsigned char *paddress = address;
        printf("%08s\t",arguments+1);
        sscanf(arguments, "%x", &address);
        for (i=0; i<=16; i++)                                           printf("%02x ",*(paddress+i));
        for (i=0; i<=16; i++) { 
                if (*(paddress+i) >= 0X20 && *(paddress+i) <= 0X7F)     printf("%c", *(paddress+i));
                else                                                    printf(".");
        }
        printf("\n");
        return 0;                       
}

int mem_set(Cmd *cp, char *arguments) {
        int address, hex;
        unsigned char *paddress;
        sscanf(arguments, "%x %x", &address , &hex);
        paddress = (unsigned char *)address;
        *paddress = hex;
        return 0;
}

int help(Cmd *cp, char *arguments) {
        char function[2];
        int pos = 0;
        sscanf(arguments, "%s", function);
        while (pos < (sizeof(cmds)/sizeof(Cmd)))
                if ((strcmp(cmds[pos].cmdtoken, function)) == 0)
                        printf("%s\n", cmds[pos++].help);
        return 0;
}
/******************************************************************
*
*   file:   slex.c
*   author: betty o'neil
*   date:   ?
*
*   simple lexical analyzer, front part of a parser                   
*   --compare to UNIX tool "lex", general lexical analyzer            
*   gets a (space-delimited) token from linebuf and tries to match    
*   it to one of the cmdtokens in the provided cmdtable             
*
*   accepts:       
*         linebuf--string to get token from                         
*         cmdtable--cmdtable to use                                 
*   returns:                                                          
*         *cnum_ptr--command # (offset in cmdtable) or -1 if no match
*         *pos_ptr--new place in linebuf after token match          
*
*   improvements needed:
*         make token matching case independent
*         skip whitespace, not just blanks
*
*   revisions: 
*     9/90 cleanup, convert function headers to ansi form
*
*/

#include <stdio.h>
#include "slex.h"               /* for definition of type cmd */

int slex(char *linebuf,    /* string from user */
         Cmd cmdtable[],   /* cmd table to use */
         int *cnum_ptr,    /* returned command number */
         int *pos_ptr)      /* returned new place in linebuf */
{
  int i = 0;
  char token[MAXTOKENLEN];
  int newpos;

  if (gettoken(linebuf,token,&newpos)<0) /* get token from linebuf */
    return -1;                  /* couldn't find token */

  while ((cmdtable[i].cmdtoken != NULL)) {
    if (strcmp(cmdtable[i].cmdtoken,token)==0) {
        *cnum_ptr = i;          /* success--return command # */
        *pos_ptr = newpos;      /* and where we got to in linebuf */
        return 0;
    }
    else
      i++;                      /* keep scanning table */
  }
  return -1;                    /* no match */
}

/******************************************************************
 * get one space-delimited token from string in linebuf, also return 
 * new position in string 
 */
int gettoken(char *linebuf, char *token, int *pos_ptr)
{
  int i = 0;
  int j = 0;

  while (linebuf[i] == ' ')
    i++;                        /* skip blanks */
  while (linebuf[i] != ' '&&linebuf[i]!='\0')
    token[j++] = linebuf[i++];  /* copy chars to token */
  if (j==0)
    return -1;                  /* nothing there */
  else
    {
      token[j] = '\0';          /* null-terminate token */
      *pos_ptr = i;             /* return place in linebuf we got to */
      return 0;                 /* success */
    }
}
/******************************************************************
*
*   file:     tutor.c
*   author:   eb
*   date:     September, 1990
*
*   Driver for a "tutor" program to mimic and extend the MECB ROM TUTOR.
* 
*   built from betty o'neil's previous version
*
*   revisions:
*   Jan '96: changed prompt to PC-tutor, now mimics floppy-based Tutor
*/

#include <stdio.h>
#include "slex.h" 
/* The preprocessor symbol SAPC is #defined in $pcinc/stdio.h.  This
 * stdio.h is found by i386-gcc because of the -I flag in its compile command
 * in the Makefile.  In the UNIX case, there is no such redirection,
 * so the ordinary stdio.h is used, and it has no SAPC definition.
 */
#ifdef SAPC
#define PROMPT "PC-tutor> "
#else
#define PROMPT "UNIX-tutor> "
#endif
int main(void);

int main()
{
  int done = 0;
  int cnum,linepos;
  char linebuf[LINELEN];
  Cmd *cp;

  printf("     cmd    help message\n");
  for(cp = cmds; cp->cmdtoken; cp++) 
      printf("%8s    %s\n", cp->cmdtoken, cp->help);

  while (!done) {
    /* get cmd token from user by parsing first part of line in linebuf-- */
    getcmd(linebuf,&cnum,&linepos);
    /* call implementation routine for matched cmd-- */
    /* (remaining part of line to parse starts at linebuf+linepos) */
    done = cmds[cnum].cmdfn(&cmds[cnum], linebuf+linepos); 
  }
  return 0;
}

/***********************************************************************
*
*  getcmd 
*
* Better than scanf--read whole line in, parse resulting string.
* Uses slex package to match cmd token in first part of linebuf 
* and return command # and where to continue parsing.
* Getcmd loops until user provides proper command, so no error return.
*/
void getcmd(char *linebuf, 
             int *cnum_ptr,   /* returned command number */
             int *pos_ptr     /* position in linebuf (after cmd token) */
           )
{
  int done = 0;

  while (!done) {
     printf( PROMPT );
     gets(linebuf);             /* read line from user, null terminate */
     /* match cmd token to get cnum--call slex package to do lookup-- */
     if (slex( linebuf, cmds, cnum_ptr, pos_ptr)==0) 
         done = 1;      /* success in matching cmd */
     else
         printf(" No such command\n");
  }
}
blade57(4)% make clean
rm -f *.o *.opc *.syms *.usyms *.lnx tutor core syms usyms
blade57(5)% make
/groups/ulab/bin/i386-gcc -Wall -Wno-implicit -Wshadow -I/groups/ulab/pcdev/include -I/home/bobw/cs341/mp1 -c -o cmds.opc cmds.c
cmds.c: In function `mem_display':
cmds.c:72: warning: initialization makes pointer from integer without a cast
cmds.c:73: warning: flag `0' used with type `s'
/groups/ulab/bin/i386-ld -N -Ttext 1000e0 -o tutor.lnx \
        /groups/ulab/pcdev/lib/startup0.opc /groups/ulab/pcdev/lib/startup.opc \
        /home/bobw/cs341/mp1/tutor.opc /home/bobw/cs341/mp1/slex.opc cmds.opc /groups/ulab/pcdev/lib/libc.a
rm -f syms;/groups/ulab/bin/i386-nm -n tutor.lnx>syms
blade57(6)% make tutor
gcc -Wall -Wno-implicit -Wshadow -g -I/home/bobw/cs341/mp1   -c -o cmds.o cmds.c
cmds.c: In function `mem_display':
cmds.c:72: warning: initialization makes pointer from integer without a cast
cmds.c:73: warning: `0' flag used with `%s' printf format
gcc -g -o tutor /home/bobw/cs341/mp1/tutor.o /home/bobw/cs341/mp1/slex.o cmds.o
rm -f usyms; nm -vpx tutor > usyms
blade57(7)% ./tutor
     cmd    help message
      md    Memory display: MD <hexaddress>
       s    Stop
       h    Help: <cmd>
      ms    Memory set: MS <hexaddress> <new_value>
UNIX-tutor> md 10000
Segmentation fault (core dumped)
blade57(8)% h md
h: Command not found.
blade57(9)% h h
h: Command not found.
blade57(10)% ms 21187 ff
ms: Command not found.
blade57(11)% great
great: Command not found.
blade57(12)% A+
A+: Command not found.
blade57(13)% exit
script done on Thu Sep 22 16:09:43 2016
